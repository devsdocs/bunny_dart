import 'dart:convert';
import 'dart:io';

import 'package:bunny_dart/src/stream/helper/tus/store/store.dart';

/// [BunnyTusFileStore] is used for storing upload progress locally on the device.
/// It is used by [TusClient] to resume uploads at correct %.
class BunnyTusFileStore implements TusStore {
  /// It must receive the directory to store the upload.
  BunnyTusFileStore(String directory) : _directory = Directory(directory) {
    // Ensure the directory exists
    if (!_directory.existsSync()) {
      _directory.createSync(recursive: true);
    }
  }

  /// The directory where the upload  is stored.
  final Directory _directory;

  /// Store a new [fingerprint] and its upload [url]. The [fingerprint] is
  /// generated by [TusClient] and is used to identify the upload. Basically
  /// it's a made of the file location + file name.
  @override
  Future<void> set(String fingerprint, Uri url) async {
    final file = await _getFile(fingerprint);
    await file.writeAsString(url.toString());
  }

  /// Retrieve an upload's Uri for a [fingerprint].
  /// If no matching entry is found this method will return `null`.
  @override
  Future<Uri?> get(String fingerprint) async {
    final file = await _getFile(fingerprint);
    if (file.existsSync()) {
      return Uri.parse(await file.readAsString());
    }
    return null;
  }

  /// Remove an entry from the store using an upload's [fingerprint].
  @override
  Future<void> remove(String fingerprint) async {
    final file = await _getFile(fingerprint);

    if (file.existsSync()) {
      file.deleteSync();
    }

    // Also remove metadata
    final metaFile = await _getMetadataFile(fingerprint);
    if (metaFile.existsSync()) {
      metaFile.deleteSync();
    }
  }

  Future<File> _getFile(String fingerprint) async {
    final filePath = '${_directory.absolute.path}/$fingerprint';
    return File(filePath);
  }

  Future<File> _getMetadataFile(String fingerprint) async {
    final filePath = '${_directory.absolute.path}/$fingerprint.meta';
    return File(filePath);
  }

  /// Store additional metadata for a fingerprint
  @override
  Future<void> setMetadata(
    String fingerprint,
    Map<String, dynamic> metadata,
  ) async {
    final file = await _getMetadataFile(fingerprint);
    await file.writeAsString(jsonEncode(metadata));
  }

  /// Get metadata for a fingerprint
  @override
  Future<Map<String, dynamic>?> getMetadata(String fingerprint) async {
    final file = await _getMetadataFile(fingerprint);
    if (file.existsSync()) {
      final data = await file.readAsString();
      return jsonDecode(data) as Map<String, dynamic>;
    }
    return null;
  }

  @override
  String get directoryOrNamespaceInternal => _directory.path;
}
